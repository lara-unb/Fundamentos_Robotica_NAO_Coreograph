<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Speech Reco." id="1" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="196" y="171">
              <bitmap>media/images/box/interaction/ear.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
              <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
              <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="yes;no;Senta;Levanta;Late;Pega;Stand;Bola;Chuta" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
              <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="17" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
              <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
              <Resource name="Speech recognition" type="Lock" timeout="0" />
            </Box>
            <Box name="Switch Case" id="2" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="375" y="248">
              <bitmap>media/images/box/interaction/choice.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("Senta")):
			self.output_1(p)
		elif(p == self.typeConversion("Levanta")):
			self.output_2(p)
		elif(p == self.typeConversion("Late")):
			self.output_3(p)
		elif(p == self.typeConversion("Pega")):
			self.output_4(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                </content>
              </script>
              <pluginContent>
                <keywords>
                  <keyword>&quot;Senta&quot;</keyword>
                  <keyword>&quot;Levanta&quot;</keyword>
                  <keyword>&quot;Late&quot;</keyword>
                  <keyword>&quot;Pega&quot;</keyword>
                  <keyword></keyword>
                  <keyword></keyword>
                </keywords>
              </pluginContent>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
              <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
              <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
              <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
              <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
              <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
              <Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
            </Box>
            <Box name="Sit Down" id="3" localization="8" tooltip="the robot tries to sit down from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="680" y="0">
              <bitmap>media/images/box/movement/sit_ground.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in sitting down." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to sit down after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Timeline enable="0">
                <BehaviorLayer name="SitDownBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="371" y="101">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Sit" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="Stand Up" id="4" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="687" y="108">
              <bitmap>media/images/box/movement/stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="StandUpBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Box name="Say" id="6" localization="8" tooltip="Say some text. The text can be localized." x="690" y="246">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="AU AU AU AU AU AU AU AU" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Red Ball Tracker" id="9" localization="-1" tooltip="This box makes the robot track a red ball with different modes." x="536" y="455">
              <bitmap>media/images/box/tracker/tracker.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.targetName = "RedBall"
        self.distanceX = 0.0
        self.distanceY = 0.0
        self.angleWz = 0.0
        self.thresholdX = 0.0
        self.thresholdY = 0.0
        self.thresholdWz = 0.0
        self.subscribeDone = None
        self.effector = "None"
        self.isRunning = False

    def onLoad(self):
        self.tracker = self.session().service( "ALTracker" )
        self.memory = self.session().service("ALMemory")
        self.BIND_PYTHON(self.getName(), "setParameter")
        self.BIND_PYTHON(self.getName(), "onTargetLost")
        self.BIND_PYTHON(self.getName(), "onTargetReached")
        self.BIND_PYTHON(self.getName(), "onTargetChanged")
        self.memory.subscribeToEvent("ALTracker/ActiveTargetChanged", self.getName(), "onTargetChanged")

    def onUnload(self):
        if self.subscribeDone:
            self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False

        if self.isRunning:
            self.tracker.setEffector("None")
            self.tracker.stopTracker()
            self.tracker.unregisterTarget(self.targetName)
            self.isRunning = False

    def onInput_onStart(self):
        self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
        self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
        self.subscribeDone = True

        mode = self.getParameter("Mode")
        diameter = self.getParameter("Diameter (m)")
        self.distanceX = self.getParameter("Distance X (m)")
        self.thresholdX = self.getParameter("Threshold X (m)")
        self.distanceY = self.getParameter("Distance Y (m)")
        self.thresholdY = self.getParameter("Threshold Y (m)")
        self.angleWz = self.getParameter("Theta (rad)")
        self.thresholdWz = self.getParameter("Threshold Theta (rad)")
        self.effector = self.getParameter("Effector")

        self.tracker.setEffector(self.effector)

        self.tracker.registerTarget(self.targetName, diameter)
        self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                           self.thresholdX, self.thresholdY, self.thresholdWz])
        self.tracker.setMode(mode)

        self.tracker.track(self.targetName) #Start tracker for red ball
        self.isRunning = True

    def onInput_onStop(self):
        self.onStopped()
        self.onUnload()

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)
        if (parameterName == 'Mode'):
            self.tracker.setMode(newValue)
            return

        if (parameterName == "Diameter (m)"):
            self.tracker.registerTarget(self.targetName, newValue)
            return

        if (parameterName == "Distance X (m)"):
            self.distanceX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Distance Y (m)"):
            self.distanceY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Theta (rad)"):
            self.angleWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold X (m)"):
            self.thresholdX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Y (m)"):
            self.thresholdY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Theta (rad)"):
            self.thresholdWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if(parameterName == "Effector"):
            self.tracker.setEffector(newValue)
            self.effector = newValue
            return

    def onTargetLost(self, key, value, message):
        self.targetLost()

    def onTargetReached(self, key, value, message):
        self.targetReached()

    def onTargetChanged(self, key, value, message):
        if value == self.targetName and not self.subscribeDone:
            self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
            self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
            self.subscribeDone = True
        elif value != self.targetName and self.subscribeDone:
            self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="targetLost" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the target is lost." id="5" />
              <Output name="targetReached" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the target is reached." id="6" />
              <Parameter name="Mode" inherits_from_parent="0" content_type="3" value="Move" default_value="Head" custom_choice="0" tooltip="Set tracker mode" id="7">
                <Choice value="Head" />
                <Choice value="WholeBody" />
                <Choice value="Move" />
              </Parameter>
              <Parameter name="Effector" inherits_from_parent="0" content_type="3" value="None" default_value="None" custom_choice="0" tooltip="Set effector to use for tracking. Head is always used." id="8">
                <Choice value="None" />
                <Choice value="Arms" />
                <Choice value="LArm" />
                <Choice value="RArm" />
              </Parameter>
              <Parameter name="Diameter (m)" inherits_from_parent="0" content_type="2" value="0.05" default_value="0.06" min="0.01" max="1" tooltip="Diameter of the ball in meters." id="9" />
              <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.3" min="0.01" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="10" />
              <Parameter name="Threshold X (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0.01" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="11" />
              <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="12" />
              <Parameter name="Threshold Y (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="13" />
              <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="Wz angle of the vector robot-target the robot will try to maintain in move modes." id="14" />
              <Parameter name="Threshold Theta (rad)" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.3" min="0" max="3.14" tooltip="Threshold of the angle of the vector robot-target above which the robot will move to track its target in move modes." id="15" />
            </Box>
            <Box name="mov_chute_2" id="5" localization="8" tooltip="" x="721" y="464">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

      names = list()
      times = list()
      keys = list()

      names.append("LAnklePitch")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.095066, [3, -0.466667, 0], [3, 0.746667, 0]], [-1.1981, [3, -0.746667, 0], [3, 0.52, 0]], [-1.19349, [3, -0.52, 0], [3, 0.6, 0]], [-1.21497, [3, -0.6, 0], [3, 0.213333, 0]], [-1.19349, [3, -0.213333, 0], [3, 0.44, 0]], [-1.19503, [3, -0.44, 0], [3, 0.866667, 0]], [0.0797259, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LAnkleRoll")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[-0.113474, [3, -0.466667, 0], [3, 0.4, 0]], [-0.191091, [3, -0.4, 0], [3, 0.346667, 0]], [0.06447, [3, -0.346667, -0.00511331], [3, 0.52, 0.00766996]], [0.07214, [3, -0.52, -0.00213663], [3, 0.6, 0.00246534]], [0.0782759, [3, -0.6, 0], [3, 0.213333, 0]], [0.066004, [3, -0.213333, 0.0083483], [3, 0.44, -0.0172184]], [0.00157595, [3, -0.44, 0.0201455], [3, 0.866667, -0.0396805]], [-0.113474, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LElbowRoll")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[-0.391128, [3, -0.466667, 0], [3, 0.4, 0]], [-0.329768, [3, -0.4, -0.0147923], [3, 0.346667, 0.01282]], [-0.308291, [3, -0.346667, 0], [3, 0.52, 0]], [-0.31136, [3, -0.52, 0.00306866], [3, 0.6, -0.00354076]], [-0.360448, [3, -0.6, 0], [3, 0.213333, 0]], [-0.322099, [3, -0.213333, -0.00734654], [3, 0.44, 0.0151522]], [-0.292952, [3, -0.44, 0], [3, 0.866667, 0]], [-0.397265, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LElbowYaw")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[-1.18736, [3, -0.466667, 0], [3, 0.4, 0]], [-1.17815, [3, -0.4, 0], [3, 0.346667, 0]], [-1.1981, [3, -0.346667, 0], [3, 0.52, 0]], [-1.18429, [3, -0.52, 0], [3, 0.6, 0]], [-1.19503, [3, -0.6, 0], [3, 0.213333, 0]], [-1.19349, [3, -0.213333, 0], [3, 0.44, 0]], [-1.19349, [3, -0.44, 0], [3, 0.866667, 0]], [-1.19349, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LHand")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.2936, [3, -0.466667, 0], [3, 0.4, 0]], [0.2856, [3, -0.4, 0.000461546], [3, 0.346667, -0.000400007]], [0.2852, [3, -0.346667, 0], [3, 0.52, 0]], [0.2872, [3, -0.52, 0], [3, 0.6, 0]], [0.2872, [3, -0.6, 0], [3, 0.213333, 0]], [0.282, [3, -0.213333, 0], [3, 0.44, 0]], [0.282, [3, -0.44, 0], [3, 0.866667, 0]], [0.282, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LHipPitch")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.128898, [3, -0.466667, 0], [3, 0.746667, 0]], [-1.00626, [3, -0.746667, 0.00660725], [3, 0.52, -0.00460148]], [-1.01086, [3, -0.52, 0], [3, 0.6, 0]], [-1.01086, [3, -0.6, 0], [3, 0.213333, 0]], [-1.0078, [3, -0.213333, -0.0030673], [3, 0.44, 0.0063263]], [-0.753151, [3, -0.44, -0.127588], [3, 0.866667, 0.25131]], [0.128898, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LHipRoll")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.121228, [3, -0.466667, 0], [3, 0.746667, 0]], [0.598302, [3, -0.746667, -0.0132155], [3, 0.52, 0.00920368]], [0.607506, [3, -0.52, -0.00451064], [3, 0.6, 0.00520459]], [0.627448, [3, -0.6, 0], [3, 0.213333, 0]], [0.595234, [3, -0.213333, 0.032214], [3, 0.44, -0.0664414]], [0.0276539, [3, -0.44, 0], [3, 0.866667, 0]], [0.12583, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LHipYawPitch")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[-0.170232, [3, -0.466667, 0], [3, 0.746667, 0]], [-0.220854, [3, -0.746667, 0], [3, 0.52, 0]], [-0.21932, [3, -0.52, -0.000949597], [3, 0.6, 0.00109569]], [-0.214718, [3, -0.6, -2.05979e-6], [3, 0.213333, 7.32369e-7]], [-0.214717, [3, -0.213333, 0], [3, 0.44, 0]], [-0.246933, [3, -0.44, 0], [3, 0.866667, 0]], [-0.171766, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LKneePitch")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[-0.0951499, [3, -0.466667, 0], [3, 0.746667, 0]], [2.11534, [3, -0.746667, 0], [3, 0.52, 0]], [2.11381, [3, -0.52, 0.000711422], [3, 0.6, -0.000820872]], [2.11074, [3, -0.6, 0], [3, 0.213333, 0]], [2.11534, [3, -0.213333, -0.00116904], [3, 0.44, 0.00241114]], [2.12148, [3, -0.44, 0], [3, 0.866667, 0]], [-0.10282, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LShoulderPitch")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[1.47873, [3, -0.466667, 0], [3, 0.4, 0]], [1.52015, [3, -0.4, -0.00177029], [3, 0.346667, 0.00153425]], [1.52169, [3, -0.346667, 0], [3, 0.52, 0]], [1.51555, [3, -0.52, 0.00613619], [3, 0.6, -0.00708022]], [1.4818, [3, -0.6, 0], [3, 0.213333, 0]], [1.52475, [3, -0.213333, 0], [3, 0.44, 0]], [1.51708, [3, -0.44, 0.00551], [3, 0.866667, -0.010853]], [1.47567, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LShoulderRoll")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.216252, [3, -0.466667, 0], [3, 0.4, 0]], [0.478566, [3, -0.4, -0.0868354], [3, 0.346667, 0.0752574]], [0.70253, [3, -0.346667, 0], [3, 0.52, 0]], [0.681054, [3, -0.52, 0.00949617], [3, 0.6, -0.0109571]], [0.64117, [3, -0.6, 0], [3, 0.213333, 0]], [0.688724, [3, -0.213333, 0], [3, 0.44, 0]], [0.677985, [3, -0.44, 0.010739], [3, 0.866667, -0.0211526]], [0.216252, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("LWristYaw")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.116542, [3, -0.466667, 0], [3, 0.4, 0]], [0.0689882, [3, -0.4, 0.0106832], [3, 0.346667, -0.00925879]], [0.056716, [3, -0.346667, 0], [3, 0.52, 0]], [0.0705221, [3, -0.52, 0], [3, 0.6, 0]], [0.0705221, [3, -0.6, 0], [3, 0.213333, 0]], [0.0674542, [3, -0.213333, 0], [3, 0.44, 0]], [0.0674542, [3, -0.44, 0], [3, 0.866667, 0]], [0.0705221, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RAnklePitch")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.0874801, [3, -0.466667, 0], [3, 0.746667, 0]], [-0.773094, [3, -0.746667, 0.12335], [3, 0.52, -0.0859045]], [-0.858998, [3, -0.52, 0], [3, 0.6, 0]], [0.748634, [3, -0.6, 0], [3, 0.213333, 0]], [-0.645772, [3, -0.213333, 0.196352], [3, 0.44, -0.404976]], [-1.05535, [3, -0.44, 0], [3, 0.866667, 0]], [0.0828778, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RAnkleRoll")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.113558, [3, -0.466667, 0], [3, 0.746667, 0]], [-0.061318, [3, -0.746667, 0.00220294], [3, 0.52, -0.00153419]], [-0.0628521, [3, -0.52, 0], [3, 0.6, 0]], [0.122762, [3, -0.6, -0.101093], [3, 0.213333, 0.0359442]], [0.34826, [3, -0.213333, 0], [3, 0.44, 0]], [-0.10427, [3, -0.44, 0], [3, 0.866667, 0]], [0.121228, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RElbowRoll")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.408086, [3, -0.466667, 0], [3, 0.4, 0]], [0.455641, [3, -0.4, -0.018901], [3, 0.346667, 0.0163809]], [0.513931, [3, -0.346667, 0], [3, 0.52, 0]], [0.489388, [3, -0.52, 0], [3, 0.6, 0]], [0.675002, [3, -0.6, 0], [3, 0.213333, 0]], [0.500126, [3, -0.213333, 0.0664525], [3, 0.44, -0.137058]], [0.06447, [3, -0.44, 0], [3, 0.866667, 0]], [0.398881, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RElbowYaw")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[1.18727, [3, -0.466667, 0], [3, 0.4, 0]], [1.1704, [3, -0.4, 0.00465692], [3, 0.346667, -0.004036]], [1.1612, [3, -0.346667, 0], [3, 0.52, 0]], [1.1704, [3, -0.52, 0], [3, 0.6, 0]], [0.681054, [3, -0.6, 0], [3, 0.213333, 0]], [1.1658, [3, -0.213333, -0.0711275], [3, 0.44, 0.1467]], [1.33454, [3, -0.44, 0], [3, 0.866667, 0]], [1.21642, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RHand")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.2896, [3, -0.466667, 0], [3, 0.4, 0]], [0.2724, [3, -0.4, 0], [3, 0.346667, 0]], [0.2816, [3, -0.346667, -0.000800014], [3, 0.52, 0.00120002]], [0.2828, [3, -0.52, 0], [3, 0.6, 0]], [0.2828, [3, -0.6, 0], [3, 0.213333, 0]], [0.2752, [3, -0.213333, 0], [3, 0.44, 0]], [0.2752, [3, -0.44, 0], [3, 0.866667, 0]], [0.2864, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RHipPitch")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.128814, [3, -0.466667, 0], [3, 0.746667, 0]], [-0.6704, [3, -0.746667, 0.151984], [3, 0.52, -0.105846]], [-0.776246, [3, -0.52, 0.0712214], [3, 0.6, -0.0821785]], [-1.1306, [3, -0.6, 0], [3, 0.213333, 0]], [-0.589097, [3, -0.213333, 0], [3, 0.44, 0]], [-0.911238, [3, -0.44, 0], [3, 0.866667, 0]], [0.125746, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RHipRoll")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[-0.121144, [3, -0.466667, 0], [3, 0.746667, 0]], [0.365133, [3, -0.746667, -0.00220355], [3, 0.52, 0.00153461]], [0.366668, [3, -0.52, 0], [3, 0.6, 0]], [0.362066, [3, -0.6, 0], [3, 0.213333, 0]], [0.366667, [3, -0.213333, 0], [3, 0.44, 0]], [0.135034, [3, -0.44, 0.0549265], [3, 0.866667, -0.108189]], [-0.122678, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RHipYawPitch")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[-0.170232, [3, -0.466667, 0], [3, 0.746667, 0]], [-0.220854, [3, -0.746667, 0], [3, 0.52, 0]], [-0.21932, [3, -0.52, -0.000949597], [3, 0.6, 0.00109569]], [-0.214718, [3, -0.6, -2.05979e-6], [3, 0.213333, 7.32369e-7]], [-0.214717, [3, -0.213333, 0], [3, 0.44, 0]], [-0.246933, [3, -0.44, 0], [3, 0.866667, 0]], [-0.171766, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RKneePitch")
      times.append([1.36, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[-0.091998, [3, -0.466667, 0], [3, 0.746667, 0]], [1.64449, [3, -0.746667, -0.2489], [3, 0.52, 0.173341]], [1.81783, [3, -0.52, 0], [3, 0.6, 0]], [0.43263, [3, -0.6, 0], [3, 0.213333, 0]], [1.38218, [3, -0.213333, -0.183496], [3, 0.44, 0.37846]], [2.1185, [3, -0.44, 0], [3, 0.866667, 0]], [-0.0996681, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RShoulderPitch")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[1.4374, [3, -0.466667, 0], [3, 0.4, 0]], [1.14441, [3, -0.4, 0.0909441], [3, 0.346667, -0.0788182]], [0.928112, [3, -0.346667, 0], [3, 0.52, 0]], [0.94652, [3, -0.52, 0], [3, 0.6, 0]], [0.84681, [3, -0.6, 0], [3, 0.213333, 0]], [1.05083, [3, -0.213333, -0.0571024], [3, 0.44, 0.117774]], [1.37144, [3, -0.44, -0.0366035], [3, 0.866667, 0.0720979]], [1.44354, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RShoulderRoll")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[-0.199461, [3, -0.466667, 0], [3, 0.4, 0]], [0.0444441, [3, -0.4, -0.0857396], [3, 0.346667, 0.0743077]], [0.28068, [3, -0.346667, 0], [3, 0.52, 0]], [0.245398, [3, -0.52, 0.00830922], [3, 0.6, -0.00958757]], [0.22699, [3, -0.6, 0], [3, 0.213333, 0]], [0.329768, [3, -0.213333, 0], [3, 0.44, 0]], [-0.665798, [3, -0.44, 0], [3, 0.866667, 0]], [-0.20253, [3, -0.866667, 0], [3, 0, 0]]])

      names.append("RWristYaw")
      times.append([1.36, 2.56, 3.6, 5.16, 5.25, 5.5, 8.92, 11.52])
      keys.append([[0.076658, [3, -0.466667, 0], [3, 0.4, 0]], [0.0536479, [3, -0.4, 0.00931357], [3, 0.346667, -0.00807177]], [0.024502, [3, -0.346667, 0], [3, 0.52, 0]], [0.049046, [3, -0.52, 0], [3, 0.6, 0]], [-0.513932, [3, -0.6, 0], [3, 0.213333, 0]], [0.00916195, [3, -0.213333, -0.108695], [3, 0.44, 0.224183]], [0.484702, [3, -0.44, 0], [3, 0.866667, 0]], [0.128814, [3, -0.866667, 0], [3, 0, 0]]])

      try:
        # uncomment the following line and modify the IP if you use this script outside Choregraphe.
        #motion = session.service("ALMotion")
        #motion.angleInterpolationBezier(names, times, keys)

        #motion = config.loadProxy("ALMotion")
        motion= ALProxy("ALMotion")
        motion.angleInterpolationBezier(names, times, keys);
        #motion.angleInterpolation(names, keys, times, True);
      except BaseException, err:
        print err




        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="5" />
            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="5" />
            <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" />
            <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="4" />
            <Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="7" />
            <Link inputowner="5" indexofinput="2" outputowner="9" indexofoutput="5" />
            <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
